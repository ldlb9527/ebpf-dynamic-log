package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/perf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target amd64 -type data_t bpf uprobe_kernel.c -- -I../headers

func main() {

	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory foMakefiler eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}
	defer objs.Close()

	// Open an ELF binary and read its symbols.
	ex, err := link.OpenExecutable("./test")
	if err != nil {
		log.Fatalf("opening executable: %s", err)
	}
	uprobe, err := ex.Uprobe("AddNum",objs.UprobeEntry, nil)
	if err != nil {
		log.Fatalf("creating uprobe: %s", err)
	}
	defer uprobe.Close()

	// Open a Uretprobe at the exit point of the symbol and attach
	// the pre-compiled eBPF program to it.
	up, err := ex.Uretprobe("AddNum", objs.UprobeReturn, nil)
	if err != nil {
		log.Fatalf("creating uretprobe: %s", err)
	}
	defer up.Close()

	// Open a perf event reader from userspace on the PERF_EVENT_ARRAY map
	// described in the eBPF C program.
	rd, err := perf.NewReader(objs.Events, os.Getpagesize())
	if err != nil {
		log.Fatalf("creating perf event reader: %s", err)
	}
	defer rd.Close()

	go func() {
		// Wait for a signal and close the perf reader,
		// which will interrupt rd.Read() and make the program exit.
		<-stopper
		log.Println("Received signal, exiting program..")

		if err := rd.Close(); err != nil {
			log.Fatalf("closing perf event reader: %s", err)
		}
	}()

	log.Printf("Listening for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfDataT
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, perf.ErrClosed) {
				return
			}
			log.Printf("reading from perf event reader: %s", err)
			continue
		}

		if record.LostSamples != 0 {
			log.Printf("perf event ring buffer full, dropped %d samples", record.LostSamples)
			continue
		}

		// Parse the perf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing perf event: %s", err)
			continue
		}

		comment := fmt.Sprintf(" pid:%v ", event.Pid)
		comment += fmt.Sprintf(" comm:%s ", unix.ByteSliceToString(event.Comm[:]))
		comment += fmt.Sprintf(" current_time:%s ", ktimeToTime(event.KtimeNs).String())

		if event.Entry {
			comment += fmt.Sprintf(" arg1:%v ", event.Args[0])
			comment += fmt.Sprintf(" arg2:%v ", event.Args[1])
		}else {
			comment += fmt.Sprintf(" return:%v ", event.Ret)
		}
		fmt.Println(comment)
	}

}

// ktimeToTime 将内核时间（自开机以来的纳秒数）转换为 time.Time 类型的时间对象
func ktimeToTime(ktime uint64) time.Time {
	// 获取当前时间的纳秒数
	now := time.Now().UnixNano()

	// 计算自开机以来经过的纳秒数
	uptimeNanos := now - int64(ktime)

	// 转换为 time.Duration 对象
	uptimeDuration := time.Duration(uptimeNanos)

	// 创建 time.Time 对象
	bootTime := time.Unix(0, 0).Add(uptimeDuration)

	return bootTime
}